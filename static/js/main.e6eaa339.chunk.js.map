{"version":3,"sources":["assets/images/knob.png","logo.svg","Components/WheelOfFortune.js","App.js","reportWebVitals.js","index.js"],"names":["AnimatedSvg","Animated","createAnimatedComponent","Svg","Dimensions","get","width","height","WheelOfFortune","props","prepareWheel","Rewards","options","rewards","RewardCount","length","numberOfSegments","fontSize","onedeg","angleBySegment","angleOffset","winner","Math","floor","random","_wheelPaths","makeWheel","_angle","Value","onRef","resetWheelState","setState","enabled","started","finished","gameScreen","wheelOpacity","imageLeft","imageTop","_tryAgain","angleListener","_onPress","addListener","event","state","angle","value","data","Array","from","fill","arcs","d3Shape","colors","map","arc","index","instance","padAngle","outerRadius","innerRadius","path","color","centroid","_getWinnerIndex","deg","abs","round","duration","timing","toValue","useNativeDriver","start","winnerIndex","getWinner","_renderSvgWheel","View","style","styles","container","alignItems","justifyContent","transform","rotate","interpolate","inputRange","outputRange","backgroundColor","borderRadius","borderWidth","borderColor","opacity","viewBox","margin","y","x","i","toString","d","strokeWidth","rotation","origin","this","undefined","TouchableOpacity","onPress","playButton","position","content","padding","_renderTopToPlay","Component","StyleSheet","create","flex","marginTop","startText","fontWeight","textShadowColor","textShadowOffset","textShadowRadius","participants","App","buttonPress","child","winnerValue","wheelOptions","knobSize","textAngle","knobSource","require","ref","ImageBackground","source","uri","fixed","containter2","inputLayer","Text","inputFieldStyle","spinTitle","startButtonView","startButton","startButtonText","winnerView","winnerText","tryAgainButton","tryAgainText","ScrollView","wheelOfFortune","FacebookShareButton","url","quote","hashtag","FacebookIcon","size","flexDirection","image","top","left","right","bottom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6eaa339.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/knob.8a98d16f.png\";","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {Component} from 'react';\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  Dimensions,\r\n  Animated,\r\n  TouchableOpacity,\r\n  Image,\r\n} from 'react-native';\r\nimport * as d3Shape from 'd3-shape';\r\n\r\nimport Svg, {G, Text, TSpan, Path, Pattern , Rect,Line\r\n} from 'react-native-svg';\r\n\r\nconst AnimatedSvg = Animated.createAnimatedComponent(Svg);\r\n\r\nconst {width, height} = Dimensions.get('screen');\r\n\r\nclass WheelOfFortune extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      enabled: false,\r\n      started: false,\r\n      finished: false,\r\n      winner: null,\r\n      gameScreen: new Animated.Value(height / 2),\r\n      wheelOpacity: new Animated.Value(1),\r\n      imageLeft: new Animated.Value(width / 2 - 30),\r\n      imageTop: new Animated.Value(height / 2 - 70),\r\n    };\r\n    this.angle = 0;\r\n\r\n    this.prepareWheel();\r\n  }\r\n\r\n  prepareWheel = () => {\r\n    this.Rewards = this.props.options.rewards;\r\n    this.RewardCount = this.Rewards.length;\r\n\r\n    this.numberOfSegments = this.RewardCount;\r\n    this.fontSize = 32;\r\n    this.onedeg = 360;\r\n    this.angleBySegment = this.onedeg / this.numberOfSegments;\r\n    this.angleOffset = this.angleBySegment / 2;\r\n    this.winner = this.props.options.winner\r\n      ? this.props.options.winner\r\n      : Math.floor(Math.random() * this.numberOfSegments);\r\n\r\n    this._wheelPaths = this.makeWheel();\r\n    this._angle = new Animated.Value(0);\r\n\r\n    this.props.options.onRef(this);\r\n  };\r\n\r\n  resetWheelState = () => {\r\n    this.setState({\r\n      enabled: false,\r\n      started: false,\r\n      finished: false,\r\n      winner: null,\r\n      gameScreen:new Animated.Value(height / 2),\r\n      wheelOpacity: new Animated.Value(1),\r\n      imageLeft: new Animated.Value(width / 2 - 30),\r\n      imageTop: new Animated.Value(height / 2 - 70),\r\n    });\r\n  };\r\n\r\n  _tryAgain = () => {\r\n    this.prepareWheel();\r\n    this.resetWheelState();\r\n    this.angleListener();\r\n    this._onPress();\r\n  };\r\n\r\n  angleListener = () => {\r\n    this._angle.addListener(event => {\r\n      if (this.state.enabled) {\r\n        this.setState({\r\n          enabled: false,\r\n          finished: false,\r\n        });\r\n      }\r\n\r\n      this.angle = event.value;\r\n    });\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.props.options.onRef(undefined);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.angleListener();\r\n  }\r\n\r\n  makeWheel = () => {\r\n    const data = Array.from({length: this.numberOfSegments}).fill(1);\r\n    const arcs = d3Shape.pie()(data);\r\n    var colors = this.props.options.colors\r\n      ? this.props.options.colors\r\n      : [\r\n          '#E07026',\r\n          '#E8C22E',\r\n          '#ABC937',\r\n          '#4F991D',\r\n          '#22AFD3',\r\n          '#5858D0',\r\n          '#7B48C8',\r\n          '#D843B9',\r\n          '#E23B80',\r\n          '#D82B2B',\r\n        ];\r\n    return arcs.map((arc, index) => {\r\n      const instance = d3Shape\r\n        .arc()\r\n        .padAngle(0.001)\r\n        .outerRadius(width / 2)\r\n        .innerRadius(this.props.options.innerRadius || 100);\r\n      return {\r\n        path: instance(arc),\r\n        color: colors[index % colors.length],\r\n        value: this.Rewards[index],\r\n        centroid: instance.centroid(arc),\r\n      };\r\n    });\r\n  };\r\n\r\n  _getWinnerIndex = () => {\r\n    const deg = Math.abs(Math.round(this.angle % this.onedeg));\r\n    // wheel deging counterclockwise\r\n    if (this.angle < 0) {\r\n      return Math.floor(deg / this.angleBySegment);\r\n    }\r\n    // wheel deging clockwise\r\n    return (\r\n      (this.numberOfSegments - Math.floor(deg / this.angleBySegment)) %\r\n      this.numberOfSegments\r\n    );\r\n  };\r\n\r\n  _onPress = () => {\r\n    const duration = this.props.options.duration || 10000;\r\n\r\n    this.setState({\r\n      started: true,\r\n    });\r\n    Animated.timing(this._angle, {\r\n      toValue:\r\n        365 -\r\n        this.winner * (this.onedeg / this.numberOfSegments) +\r\n        360 * (duration / 1000),\r\n      duration: duration,\r\n      useNativeDriver: true,\r\n    }).start(() => {\r\n      const winnerIndex = this._getWinnerIndex();\r\n      this.setState({\r\n        finished: true,\r\n        winner: this._wheelPaths[winnerIndex].value,\r\n      });\r\n      this.props.getWinner(this._wheelPaths[winnerIndex].value, winnerIndex);\r\n    });\r\n  };\r\n\r\n//   _textRender = (x, y, number, i) => (\r\n//     <Text\r\n//       x={x - number.length * 5}\r\n//       y={y - 80}\r\n//       fill={\r\n//         this.props.options.textColor ? this.props.options.textColor : '#fff'\r\n//       }\r\n//       textAnchor=\"c\"\r\n//       fontSize={42}\r\n//       fontWeight=\"bold\"\r\n//       >\r\n//       {Array.from({length: number.length}).map((_, j) => {\r\n//         // Render reward text vertically\r\n//         if (this.props.options.textAngle === 'vertical') {\r\n//           return (\r\n//             <TSpan x={x} dy={this.fontSize} key={`arc-${i}-slice-${j}`}>\r\n//               {number.charAt(j)}\r\n//             </TSpan>\r\n//           );\r\n//         }\r\n//         // Render reward text horizontally\r\n//         else {\r\n//           return (\r\n//             // <TSpan\r\n//             //   y={y - 40}\r\n//             //   dx={this.fontSize * 0.07}\r\n//             //   key={`arc-${i}-slice-${j}`}>\r\n//             //   {number.charAt(j)}\r\n//             // </TSpan>\r\n            \r\n//             <Svg height=\"100\" width=\"200\">\r\n//   <G rotation=\"50\" origin=\"100, 50\">\r\n//     <Line x1=\"60\" y1=\"10\" x2=\"140\" y2=\"10\" stroke=\"#060\" />\r\n\r\n//     <Rect x=\"60\" y=\"20\" height=\"50\" width=\"80\" stroke=\"#060\" fill=\"#060\" />\r\n\r\n//     <Text x=\"100\" y=\"75\" stroke=\"#600\" fill=\"#600\" textAnchor=\"middle\">\r\n//       Text grouped with shapes\r\n//     </Text>\r\n//   </G>\r\n// </Svg>\r\n//           );\r\n//         }\r\n//       })}\r\n//     </Text>\r\n//   );\r\n\r\n  _renderSvgWheel = () => {\r\n    return (\r\n      <View style={styles.container}>\r\n        {/* {this._renderKnob()} */}\r\n        <Animated.View\r\n          style={{\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            transform: [\r\n              {\r\n                rotate: this._angle.interpolate({\r\n                  inputRange: [-this.onedeg, 0, this.onedeg],\r\n                  outputRange: [\r\n                    `-${this.onedeg}deg`,\r\n                    `0deg`,\r\n                    `${this.onedeg}deg`,\r\n                  ],\r\n                }),\r\n              },\r\n            ],\r\n            backgroundColor: this.props.options.backgroundColor\r\n              ? this.props.options.backgroundColor\r\n              : '#fff',\r\n            width: height/2,\r\n            height:height/2,\r\n            borderRadius: (width - 20) / 2,\r\n            borderWidth: this.props.options.borderWidth\r\n              ? this.props.options.borderWidth\r\n              : 2,\r\n            borderColor: this.props.options.borderColor\r\n              ? this.props.options.borderColor\r\n              : '#fff',\r\n            opacity: this.state.wheelOpacity,\r\n          }}>\r\n          <AnimatedSvg\r\n            width={this.state.gameScreen}\r\n            height={this.state.gameScreen}\r\n            viewBox={`0 0 ${width} ${width}`}\r\n            style={{\r\n              transform: [{rotate: `-${this.angleOffset}deg`}],\r\n              margin: 10,\r\n            }}>\r\n            <G y={width / 2} x={width / 2}>\r\n              {this._wheelPaths.map((arc, i) => {\r\n                const [x, y] = arc.centroid;\r\n                const number = arc.value.toString();\r\n\r\n                return (\r\n                  <G key={`arc-${i}`}>\r\n                    <Path d={arc.path} strokeWidth={2} fill={arc.color} />\r\n                    <G\r\n                      rotation={\r\n                        (i * this.onedeg) / this.numberOfSegments +\r\n                        this.angleOffset\r\n                      }\r\n                      origin={`${x}, ${y}`}>\r\n                      {/* {this._textRender(x, y, number, i)} */}\r\n                    </G>\r\n                  </G>\r\n                );\r\n              })}\r\n            </G>\r\n          </AnimatedSvg>\r\n        </Animated.View>\r\n      </View>\r\n    );\r\n  };\r\n\r\n//   _renderKnob = () => {\r\n//     const knobSize = this.props.options.knobSize\r\n//       ? this.props.options.knobSize\r\n//       : 20;\r\n//     // [0, this.numberOfSegments]\r\n//     const YOLO = Animated.modulo(\r\n//       Animated.divide(\r\n//         Animated.modulo(\r\n//           Animated.subtract(this._angle, this.angleOffset),\r\n//           this.onedeg,\r\n//         ),\r\n//         new Animated.Value(this.angleBySegment),\r\n//       ),\r\n//       1,\r\n//     );\r\n\r\n//     return (\r\n//       <Animated.View\r\n//         style={{\r\n//           width: knobSize,\r\n//           height: knobSize * 2,\r\n//           justifyContent: 'flex-end',\r\n//           zIndex: 1,\r\n//           opacity: this.state.wheelOpacity,\r\n//           transform: [\r\n//             {\r\n//               rotate: YOLO.interpolate({\r\n//                 inputRange: [-1, -0.5, -0.0001, 0.0001, 0.5, 1],\r\n//                 outputRange: [\r\n//                   '0deg',\r\n//                   '0deg',\r\n//                   '35deg',\r\n//                   '-35deg',\r\n//                   '0deg',\r\n//                   '0deg',\r\n//                 ],\r\n//               }),\r\n//             },\r\n//           ],\r\n//         }}>\r\n//         <Svg\r\n//           width={knobSize}\r\n//           height={(knobSize * 100) / 57}\r\n//           viewBox={`0 0 57 100`}\r\n//           style={{\r\n//             transform: [{translateY: 8}],\r\n//           }}>\r\n//           <Image\r\n//             source={\r\n//               this.props.options.knobSource\r\n//                 ? this.props.options.knobSource\r\n//                 : require('./assets/images/knob.png')\r\n//             }\r\n//             style={{ width: knobSize, height: (knobSize * 100) / 57 }}\r\n//           />\r\n//         </Svg>\r\n//       </Animated.View>\r\n//     );\r\n//   };\r\n\r\n  _renderTopToPlay() {\r\n    if (this.state.started == false) {\r\n      return (\r\n        <TouchableOpacity\r\n         onPress={() => this._onPress()}\r\n         >\r\n          {this.props.options.playButton()}\r\n        </TouchableOpacity>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View style={styles.container}>\r\n        <TouchableOpacity\r\n          style={{\r\n            position: 'absolute',\r\n            width: width,\r\n            height: height / 2,\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n          }}>\r\n          <Animated.View style={[styles.content, {padding: 10}]}>\r\n            {this._renderSvgWheel()}\r\n          </Animated.View>\r\n        </TouchableOpacity>\r\n        {this.props.options.playButton ? this._renderTopToPlay() : null}\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WheelOfFortune;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginTop:250\r\n   \r\n  },\r\n  content: {},\r\n  startText: {\r\n    fontSize: 50,\r\n    color: '#fff',\r\n    fontWeight: 'bold',\r\n    textShadowColor: 'rgba(0, 0, 0, 0.4)',\r\n    textShadowOffset: {width: -1, height: 1},\r\n    textShadowRadius: 10,\r\n  },\r\n});\r\n","import logo from './logo.svg';\nimport './App.css';\nimport React, {Component} from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity, Dimensions,ImageBackground, ScrollView\n} from 'react-native';\nimport { FacebookShareButton, FacebookIcon } from \"react-share\";\nimport WheelOfFortune from './Components/WheelOfFortune';\nconst participants = [\n  '10% Discount',\n  '50% Discount on Accessories',\n  '5.1 Home Theatre',\n  'NeckBand',\n  'None',\n  'SmartBand',\n  'HeadSet',\n  'BackCase',\n  'None',\n\n];\n\nclass App extends Component  {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      winnerValue: null,\n      winnerIndex: null,\n      started: false,\n    };\n    this.child = null;\n  }\n\n  buttonPress = () => {\n    this.setState({\n      started: true,\n    });\n    this.child._onPress();\n  };\n  render(){\n  const wheelOptions = {\n  rewards: participants,\n  knobSize: 30,\n  borderWidth: 5,\n  borderColor: '#fff',\n  innerRadius: 30,\n  duration: 6000,\n  backgroundColor: 'transparent',\n  textAngle: 'horizontal',\n  knobSource: require('./assets/images/knob.png'),\n  onRef: ref => (this.child = ref),\n};\n  return (\n    <View style={styles.container}>\n           <ImageBackground \n              source={{uri:'https://cdn4.vectorstock.com/i/1000x1000/18/08/fireworks-background-for-diwali-festival-vector-14301808.jpg'}} \n              style={[styles.fixed, styles.containter2]}>  \n     \n      <View style={styles.inputLayer}>\n            <Text style={styles.inputFieldStyle}>FACEBOOK ID</Text>\n            <Text style={styles.inputFieldStyle}>NANDY AKSHARA</Text>\n\n          </View>\n          <View style={styles.spinTitle}>\n            {!this.state.started && (\n              <View style={styles.startButtonView}>\n                 <TouchableOpacity\n                  onPress={() => this.buttonPress()}\n                  style={styles.startButton}>\n                  <Text style={styles.startButtonText}>Spin to win!</Text>\n                </TouchableOpacity> \n              </View>\n            )}\n            {this.state.winnerIndex != null && (\n              <View style={styles.winnerView}>\n                <Text style={styles.winnerText}>\n                  You win {participants[this.state.winnerIndex]}\n                </Text>\n                <TouchableOpacity\n                  onPress={() => {\n                    this.setState({ winnerIndex: null });\n                    this.child._tryAgain();\n                  }}\n                  style={styles.tryAgainButton}>\n                  <Text style={styles.tryAgainText}>TRY AGAIN</Text>\n                </TouchableOpacity> \n\n              </View>\n            )}\n\n          </View>\n          <ScrollView>\n            <View style={styles.wheelOfFortune}>\n\n\n              <WheelOfFortune\n                options={wheelOptions}\n                getWinner={(value, index) => {\n                  this.setState({ winnerValue: value, winnerIndex: index });\n                }}\n              />\n\n            </View>\n          </ScrollView>\n          <FacebookShareButton\n            url={\"http://www.camperstribe.com\"}\n            quote={\"@Poorliya - Mobile World is yours to explore\"}\n            hashtag=\"#Poorliya\">\n\n            <FacebookIcon size={36} />\n          </FacebookShareButton>\n</ImageBackground>\n</View> \n  );\n}\n  \n}\n\nexport default App;\nconst styles = StyleSheet.create({\n  wheelOfFortune: {\n    alignItems: 'center',\n   justifyContent: 'center',\n  },\n  startButtonView: {\n   position: 'absolute',\n  },\n  startButton: {\n    backgroundColor: 'rgba(0,0,0,.5)',\n    marginTop: 50,\n    padding: 5,\n  },\n  startButtonText: {\n    fontSize: 50,\n    color: '#fff',\n    fontWeight: 'bold',\n  },\n  winnerView: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  // tryAgainButton: {\n  //  padding: 10,\n  // },\n  winnerText: {\n    fontSize: 30,\n  },\n  tryAgainButton: {\n    padding: 5,\n    backgroundColor: 'rgba(0,0,0,0.5)',\n  },\n  tryAgainText: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#fff',\n  },\n  inputLayer:{\n    flex:0.2,\n    flexDirection:'row',\nmarginTop:120\n  },\n  container:{\nflex:1,\nbackgroundColor: '#E74C3C'\n  },\n  spinTitle:{\n    flex:0.2,\n    flexDirection:'row',\npadding:20 ,\nalignItems: 'center',\njustifyContent: 'center',\n  },\n  image: {\n    width: 300,\n    height: 200,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: '1.5rem'\n  },\n  containter2: {\n    width: Dimensions.get(\"window\").width, //for full screen\n    height: Dimensions.get(\"window\").height //for full screen\n  },\n  fixed: {\n   position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  },\n  inputFieldStyle:{\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#fff',\n    flex:1,\njustifyContent:\"center\" \n }\n});","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}